{
    "swagger": "2.0",
    "info": {
       "title": "Lasso API",
       "description": "Manage Registrant and Inventory data within Lasso CRM.\n\nAuthorization header with a Bearer JWT api key token is required for all requests.\nAPI keys are project/location based, and can be obtained from your business contact with Lasso Data Systems.\nIn the future, Project Admin's will be able to generate their own api keys from the Lasso CRM web application.\n\nTo try it out in swagger:\n- Select the `Authorize` button and place your api key in the textbox\n- Ensure that the api key is prefixed with `Bearer` including a space separating `Bearer` from the api key\n- Go to the route you want to try out in the swagger definition\n- Select `Try it out`\n- Input any required fields, query params, and request payload\n- Select `Execute`\n\nAlternatively, you can try it on your command line with curl, for example:\n`curl -X GET \"https://api.lassocrm.com/v1/registrants/123456\" -H \"accept: application/json\" -H \"Authorization: Bearer ***apikey***\"`\n",
       "version": "1.0.36"
    },
    "host": "api.lassocrm.com",
    "schemes": [
       "https"
    ],
    "consumes": [
       "application/json"
    ],
    "produces": [
       "application/json"
    ],
    "basePath": "/v1",
    "paths": {
       "/inventory/search": {
          "get": {
             "summary": "Search inventories by strataLot and inventoryNumber.",
             "description": "This endpoint is optimized for speed with a smaller payload than `/inventory`. This is handy for live search features, e.g. a drop-down with suggested results for a search bar.",
             "tags": [
                "Inventory"
             ],
             "parameters": [
                {
                   "name": "strataLot",
                   "in": "query",
                   "type": "string",
                   "description": "/inventory/search?strataLot=123"
                },
                {
                   "name": "inventoryNumber",
                   "in": "query",
                   "type": "string",
                   "description": "/inventory/search?inventoryNumber=123"
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Inventories found",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/InventoryRead"
                      }
                   }
                }
             }
          }
       },
       "/inventory": {
          "get": {
             "summary": "Returns a list of all inventories",
             "tags": [
                "Inventory"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Inventories found",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/InventoryRead"
                      }
                   }
                }
             }
          },
          "post": {
             "tags": [
                "Inventory"
             ],
             "summary": "Create an inventory",
             "description": "Creates an inventory, if no component is specified the default is used.",
             "parameters": [
                {
                   "in": "body",
                   "name": "Inventory",
                   "schema": {
                      "$ref": "#/definitions/InventoryCreate"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Inventory created",
                   "schema": {
                      "$ref": "#/definitions/InventoryRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "409": {
                   "description": "Inventory already exists with the given strata lot and inventory number.",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryAlreadySynced"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true,
                "description": "/inventory/123"
             }
          ],
          "get": {
             "tags": [
                "Inventory"
             ],
             "summary": "Get a single inventory",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Return an inventory item",
                   "schema": {
                      "$ref": "#/definitions/InventoryFull"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Inventory"
             ],
             "summary": "Update an inventory",
             "description": "Updates an inventory, this route will not process changes to strata lot or inventory number. Note that this will overwrite all of the inventory's information with the entity provided in the request payload. To avoid accidentally deleting existing information, first perform a GET on the same resource, then modify the returned entity, then finally apply the entity through this PUT method.",
             "parameters": [
                {
                   "in": "body",
                   "name": "Inventory",
                   "schema": {
                      "$ref": "#/definitions/InventoryUpdate"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Inventory created",
                   "schema": {
                      "$ref": "#/definitions/InventoryRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "409": {
                   "description": "Inventory already exists with the given strata lot and inventory number.",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryAlreadySynced"
                   }
                }
             }
          },
          "delete": {
             "tags": [
                "Inventory"
             ],
             "summary": "Delete an inventory",
             "description": "Deletes an inventory, in order to remove an inventory it must have a status of \"Available\" and not be \"locked\"",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "204": {
                   "description": "Inventory deleted"
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "409": {
                   "description": "Inventory is either \"locked\" or it's status is not \"Available\"",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryCannotBeDeleted"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/sync": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true,
                "description": "/inventory/123/sync"
             }
          ],
          "put": {
             "tags": [
                "Inventory"
             ],
             "summary": "Sync an inventory",
             "description": "Syncs an inventory item with Lasso. This can only be done once, afterwards Lasso will reject any subsequent PUT request with a 409 error. This is done to prevent accidental data loss in Lasso, as certain items may not be included in the sync data.",
             "parameters": [
                {
                   "in": "body",
                   "name": "Inventory",
                   "schema": {
                      "$ref": "#/definitions/InventorySync"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Inventory updated",
                   "schema": {
                      "$ref": "#/definitions/InventoryFull"
                   }
                },
                "400": {
                   "description": "Storage supply exhausted",
                   "schema": {
                      "$ref": "#/definitions/ErrorStorageSupplyExhausted"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                },
                "406": {
                   "description": "Attempted to edit an uneditable feature or referencing a non-existent resource.",
                   "schema": {
                      "$ref": "#/definitions/InvalidSubResourceAction"
                   }
                },
                "409": {
                   "description": "Inventory already synced",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryAlreadySynced"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/reset": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true,
                "description": "/inventory/123/reset"
             }
          ],
          "post": {
             "tags": [
                "Inventory"
             ],
             "summary": "Reset an inventory items. Deletes all associated data with the inventory item, e.g. pricing information, options and upgrades, deposits, etc.",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Inventory was successfully reset."
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/dates": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true,
                "description": "/inventory/123/dates"
             }
          ],
          "get": {
             "tags": [
                "Inventory Dates"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Dates associated with this inventory",
                   "schema": {
                      "$ref": "#/definitions/Dates"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Inventory Dates"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Dates",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/Dates"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Dates successfully updated",
                   "schema": {
                      "$ref": "#/definitions/Dates"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/pricing": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true
             }
          ],
          "get": {
             "tags": [
                "Inventory Pricing"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Pricing associated with this inventory",
                   "schema": {
                      "$ref": "#/definitions/Pricing"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Inventory Pricing"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Dates",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/Pricing"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Pricing successfully set",
                   "schema": {
                      "$ref": "#/definitions/Pricing"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/purchasers": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true
             }
          ],
          "put": {
             "tags": [
                "Inventory Purchasers"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Purchasers",
                   "required": true,
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PurchaserCreate"
                      }
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Purchasers successfully set",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Purchaser"
                      }
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                },
                "406": {
                   "description": "Purchaser was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorPurchaserNotFound"
                   }
                }
             }
          },
          "get": {
             "tags": [
                "Inventory Purchasers"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Purchasers associated with this inventory",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Purchaser"
                      }
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/pricing-revisions": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true
             }
          ],
          "get": {
             "tags": [
                "Inventory Pricing Revisions"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Pricing revisions associated with this inventory",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PricingRevision"
                      }
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          },
          "post": {
             "tags": [
                "Inventory Pricing Revisions"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Dates",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/PricingRevision"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Add a pricing revision",
                   "schema": {
                      "$ref": "#/definitions/PricingRevision"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          }
       },
       "/inventory/plans": {
          "get": {
             "tags": [
                "Inventory Plan Types"
             ],
             "description": "Get the plan types associated with this project",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Plan types associated with this project",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PlanTypeRead"
                      }
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                }
             }
          },
          "post": {
             "tags": [
                "Inventory Plan Types"
             ],
             "description": "Create a new plan type for this project",
             "parameters": [
                {
                   "in": "body",
                   "name": "Plan Type",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/PlanTypeWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Plan type created",
                   "schema": {
                      "$ref": "#/definitions/PlanTypeRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                }
             }
          }
       },
       "/inventory/plans/{planTypeId}": {
          "parameters": [
             {
                "in": "path",
                "name": "planTypeId",
                "type": "string",
                "required": true
             }
          ],
          "get": {
             "tags": [
                "Inventory Plan Types"
             ],
             "description": "Get a plan type associated with this project",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Plan type associated with this project",
                   "schema": {
                      "$ref": "#/definitions/PlanTypeRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Inventory Plan Types"
             ],
             "description": "Update a plan type associated with this project",
             "parameters": [
                {
                   "in": "body",
                   "name": "Plan Type",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/PlanTypeWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Plan type updated",
                   "schema": {
                      "$ref": "#/definitions/PlanTypeRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                }
             }
          }
       },
       "/inventory/{inventoryId}/plans": {
          "parameters": [
             {
                "in": "path",
                "name": "inventoryId",
                "type": "string",
                "required": true
             }
          ],
          "get": {
             "tags": [
                "Inventory Plan Types"
             ],
             "description": "Get the plan type associated with this inventory",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Plan type associated with this inventory",
                   "schema": {
                      "$ref": "#/definitions/PlanTypeRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Inventory Plan Types"
             ],
             "description": "Associate an inventory with a plan type by ID or by plan type. If both are provided, then lookup will be by ID",
             "parameters": [
                {
                   "in": "body",
                   "name": "Plan Type",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/InventoryPlanTypeWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Plan type updated",
                   "schema": {
                      "$ref": "#/definitions/PlanTypeRead"
                   }
                },
                "403": {
                   "description": "The given token does not have sufficient privileges to access this resource.",
                   "schema": {
                      "$ref": "#/definitions/AuthForbidden"
                   }
                },
                "404": {
                   "description": "Inventory was not found",
                   "schema": {
                      "$ref": "#/definitions/ErrorInventoryNotFound"
                   }
                }
             }
          }
       },
       "/projects/settings": {
          "get": {
             "summary": "Retrieve a project's settings",
             "tags": [
                "Project"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Settings for this project",
                   "schema": {
                      "$ref": "#/definitions/ProjectSettings"
                   }
                }
             }
          }
       },
       "/registrants": {
          "get": {
             "summary": "List of registrants for a project.",
             "description": "Returns a full representation of a registrant, including notes and history items excluding the history body. This may produce a lot of data, so the endpoint is limited to 20 results at a time.\nBecause a history body can be quite large, a separate request must be made to `/registrants/{registrantId}/histories/{historyId}` in order to retrieve it.\nUse the `next` link to page through the available registrants. Registrant are sorted by creation date, with newest on top.",
             "tags": [
                "Registrant"
             ],
             "parameters": [
                {
                   "in": "query",
                   "name": "rating",
                   "type": "string"
                },
                {
                   "in": "query",
                   "name": "lastModifiedAfter",
                   "type": "string",
                   "format": "date",
                   "description": "Returns only registrants that were modified at least once since the given date, in ISO 8601 UTC format"
                },
                {
                   "in": "query",
                   "name": "lastModifiedBefore",
                   "type": "string",
                   "format": "date",
                   "description": "Returns only registrants that were last modified before this date. Combined with lastModifiedAfter this allows to select registrants that were last modified between two dates. Dates are in ISO 8601 UTC format."
                },
                {
                   "in": "query",
                   "name": "registeredAfter",
                   "type": "string",
                   "format": "date",
                   "description": "Returns only registrants that were registered since the given date, in ISO 8601 UTC format."
                },
                {
                   "in": "query",
                   "name": "registeredBefore",
                   "type": "string",
                   "format": "date",
                   "description": "Returns only registrants that were registered before this date. Combined with registeredAfter this allows to select registrants that were registered between two dates. Dates are in ISO 8601 UTC format."
                },
                {
                   "$ref": "#/parameters/Cursor"
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Get a list of registrants, sorted newest-first. You can also limit the selection of registrants by rating and creation date.",
                   "schema": {
                      "type": "object",
                      "properties": {
                         "items": {
                            "type": "array",
                            "items": {
                               "$ref": "#/definitions/RegistrantRead"
                            }
                         },
                         "links": {
                            "type": "object",
                            "properties": {
                               "next": {
                                  "type": "string",
                                  "description": "Link to the next batch of registrants",
                                  "example": "/registrants?cursor=fdslkb32b3o2o"
                               }
                            }
                         }
                      }
                   }
                }
             }
          },
          "post": {
             "summary": "Create a registrant",
             "description": "Note: History body is not returned in the response payload. Because a history body can be quite large, a separate request must be made to `/registrants/{registrantId}/histories/{historyId}` in order to retrieve it.",
             "tags": [
                "Registrant"
             ],
             "parameters": [
                {
                   "name": "Registrant",
                   "in": "body",
                   "description": "Registrant to create",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/RegistrantWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Registrant has been created",
                   "schema": {
                      "$ref": "#/definitions/RegistrantRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          }
       },
       "/registrants/search": {
          "get": {
             "summary": "Search registrants by name, email, phone, nickname, externalId, rating or creation date.",
             "description": "This endpoint is optimized for speed with a smaller payload than `/registrants`. This is handy for live search features, e.g. a drop-down with suggested results for a search bar.\nNote: History body is not returned in the response payload. Because a history body can be quite large, a separate request must be made to `/registrants/{registrantId}/histories/{historyId}` in order to retrieve it.",
             "tags": [
                "Registrant"
             ],
             "parameters": [
                {
                   "name": "lastModified",
                   "in": "query",
                   "type": "string",
                   "description": "Return only registrant modified after the specified date time, in ISO 8601 UTC format."
                },
                {
                   "in": "query",
                   "name": "registeredAfter",
                   "type": "string",
                   "format": "date",
                   "description": "Returns only registrants that were registered since the given date, in ISO 8601 UTC format."
                },
                {
                   "in": "query",
                   "name": "registeredBefore",
                   "type": "string",
                   "format": "date",
                   "description": "Returns only registrants that were registered before this date. Combined with registeredAfter this allows to select registrants that were registered between two dates. Dates are in ISO 8601 UTC format."
                },
                {
                   "name": "rating",
                   "in": "query",
                   "type": "string",
                   "description": "Return only registrants who currently have the specified rating"
                },
                {
                   "name": "email",
                   "in": "query",
                   "type": "string",
                   "description": "Search registrants by email address"
                },
                {
                   "name": "phone",
                   "in": "query",
                   "type": "string",
                   "description": "Search registrants by phone number"
                },
                {
                   "name": "nickName",
                   "in": "query",
                   "type": "string",
                   "description": "Search registrants by nickname"
                },
                {
                   "name": "name",
                   "in": "query",
                   "type": "string",
                   "description": "Search registrants by name. This is a loose search, the name will be parsed into first and last name, and then partially matched. E.g. `Jim and Susan Smith` will match `Jim Smith` and `Susan Smith`."
                },
                {
                   "name": "fuzzy",
                   "in": "query",
                   "type": "boolean",
                   "description": "Default is `false`, turns on partial matching for specific field searches where the provided value is a prefix or an exact match. E.g. `name=rob&fuzzy=true` will match the name `Robert`. Affected fields are: name, nickName, phone, email, externalId, and rating."
                },
                {
                   "name": "externalId",
                   "in": "query",
                   "type": "string",
                   "description": "Search registrants by an integration externalId. The integration type will be determined by the API key."
                },
                {
                   "name": "smartSearch",
                   "in": "query",
                   "type": "string",
                   "description": "Searches for registrants where the given value is a prefix or exactly matches at least one of first name, last name, full name, phone, email, nickName, or company. E.g. `Jon`, `Jon Sno`, `Sno`, `Jo`  will all return `Jon Snow`. `jonsnow@` and `jonsno` will return a registrant with the email `jonsnow@westeros.com`."
                },
                {
                   "$ref": "#/parameters/Cursor"
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Registrants found",
                   "schema": {
                      "type": "object",
                      "properties": {
                         "links": {
                            "type": "object",
                            "properties": {
                               "next": {
                                  "type": "string",
                                  "description": "Next batch of search results",
                                  "example": "/registrants/search?name=Smith&cursor=32bj3k2b"
                               }
                            }
                         },
                         "items": {
                            "type": "array",
                            "items": {
                               "type": "object",
                               "properties": {
                                  "registrantId": {
                                     "type": "string",
                                     "example": 123
                                  },
                                  "personalId": {
                                     "type": "string",
                                     "example": 1234
                                  },
                                  "firstName": {
                                     "type": "string",
                                     "example": "John"
                                  },
                                  "lastName": {
                                     "type": "string",
                                     "example": "Smith"
                                  },
                                  "email": {
                                     "type": "string",
                                     "description": "Registrants primary email",
                                     "example": "john.smith@example.com"
                                  },
                                  "address": {
                                     "type": "string",
                                     "description": "Registrants primary address",
                                     "example": "335 Example St, ES, 38832, USA"
                                  },
                                  "phone": {
                                     "type": "string",
                                     "description": "Registrants primary phone number",
                                     "example": "512-555-8787"
                                  },
                                  "_links": {
                                     "type": "object",
                                     "properties": {
                                        "self": {
                                           "type": "string",
                                           "description": "Link to the full representation of the registrant",
                                           "example": "/registrants/123"
                                        }
                                     }
                                  }
                               }
                            }
                         }
                      }
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "type": "string",
                "required": true
             }
          ],
          "put": {
             "description": "Update a registrants personal data",
             "tags": [
                "Registrant"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Registrants personal data successfully saved",
                   "schema": {
                      "$ref": "#/definitions/RegistrantRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             },
             "parameters": [
                {
                   "name": "Registrant personal info",
                   "in": "body",
                   "description": "Registrants personal data to update",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/RegistrantPersonalInfo"
                   }
                }
             ]
          },
          "get": {
             "summary": "Extended data for a registrant",
             "description": "Note: History body is not returned in the response payload. Because a history body can be quite large, a separate request must be made to `/registrants/{registrantId}/histories/{historyId}` in order to retrieve it.",
             "tags": [
                "Registrant"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Registrant exists",
                   "schema": {
                      "$ref": "#/definitions/RegistrantRead"
                   }
                },
                "404": {
                   "description": "Registrant not found"
                }
             }
          }
       },
       "/registrants/{registrantId}/person/contact-information": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "type": "string",
                "required": true
             }
          ],
          "put": {
             "summary": "Convenience method to update all of a registrant's contact information in a single call",
             "description": "Update a registrant's contact information. This will overwrite all of the registrant's contact information with the entity provided in the request payload. To avoid accidentally deleting contact information, first perform a GET on the same resource, then modify the returned entity, and finally apply the entity through this PUT method.",
             "tags": [
                "Registrant Contact Information"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Registrant's contact information successfully saved",
                   "schema": {
                      "$ref": "#/definitions/ContactInformation"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             },
             "parameters": [
                {
                   "name": "Registrant Contact Information",
                   "in": "body",
                   "description": "Registrant's contact information for update.\n\nNotes:\n- emails, phones, addresses: for the collections that are non-empty, there must be exactly  one entity within the collection that is a designated primary, otherwise a 400 error will be returned\n",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/ContactInformation"
                   }
                }
             ]
          },
          "get": {
             "summary": "Retrieve all of a registrant's contact information",
             "description": "Retrieves all of a registrant's contact information. Use this method in conjunction with the PUT method of the same resource to perform a safe update.",
             "tags": [
                "Registrant Contact Information"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Registrant exists",
                   "schema": {
                      "$ref": "#/definitions/ContactInformation"
                   }
                },
                "404": {
                   "description": "Registrant not found"
                }
             }
          }
       },
       "/registrants/{registrantId}/integrations": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Integrations"
             ],
             "description": "Associate an external customer with a Lasso registrant. What this allows, is for integration-specific triggers to automatically fire when an event is registered for a registrant - for example, when a registrant is updated, Lasso could fire off an event to an external integration. The integration type will be determined from the API Key used to access this route.",
             "parameters": [
                {
                   "name": "External ID",
                   "in": "body",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/ExternalId"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Integrations successfully updated.",
                   "schema": {
                      "$ref": "#/definitions/ExternalId"
                   }
                }
             }
          },
          "delete": {
             "tags": [
                "Registrant Integrations"
             ],
             "description": "Disassociates a registrant from all externalId's of an integration. This means that webhooks that trigger on externalId will no longer send events for this registrant. The integration associated with the registrant will be determined from the API Key used to access this route.",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "registrant successfully disassociated from external registrant."
                }
             }
          }
       },
       "/registrants/{registrantId}/external/{externalId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "externalId",
                "required": true,
                "type": "string"
             }
          ],
          "delete": {
             "tags": [
                "Registrant Integrations"
             ],
             "description": "Disassociates a registrant from a specific externalId. This means that webhooks that trigger on the specified externalId will no longer send events for this registrant. The integration associated with the registrant will be determined from the API Key used to access this route.",
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "registrant successfully disassociated from external registrant."
                }
             }
          }
       },
       "/registrants/{registrantId}/rating": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Sales Details"
             ],
             "description": "Set the rating for the registrant. If the rating does not exist, it will be created.",
             "parameters": [
                {
                   "name": "Rating",
                   "in": "body",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/Rating"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Rating successfully updated.",
                   "schema": {
                      "$ref": "#/definitions/Rating"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/follow-up-process": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Sales Details"
             ],
             "description": "Set the follow-up process. If the follow-up process does not exist, it will be created.",
             "parameters": [
                {
                   "in": "body",
                   "name": "FollowUpProcess",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/FollowUpProcess"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Follow-up process successfully set.",
                   "schema": {
                      "$ref": "#/definitions/FollowUpProcess"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/source-type": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Sales Details"
             ],
             "description": "Set the source type. If the source type does not exist, it will be created.",
             "parameters": [
                {
                   "in": "body",
                   "name": "SourceType",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/SourceType"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Source type successfully set.",
                   "schema": {
                      "$ref": "#/definitions/SourceType"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/secondary-source-type": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Sales Details"
             ],
             "description": "Set the secondary source type. If the secondary source type does not exist, it will be created.",
             "parameters": [
                {
                   "in": "body",
                   "name": "SecondarySourceType",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/SecondarySourceType"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Secondary source type successfully set.",
                   "schema": {
                      "$ref": "#/definitions/SecondarySourceType"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/assigned-sales-reps": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "get": {
             "tags": [
                "Registrant Assigned Sales Reps"
             ],
             "description": "Gets a list of sales reps that this registrant is assigned to.",
             "responses": {
                "200": {
                   "description": "A list of sales reps that this registrant is assigned to.",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/SalesRep"
                      }
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Registrant Assigned Sales Reps"
             ],
             "description": "Update a registrant's assigned sales reps. This list will overwrite the assigned sales reps for the registrant.\nOnly one sales rep can be set to primary. If more than one has isPrimary set to true, an error will be thrown.",
             "parameters": [
                {
                   "in": "body",
                   "name": "salesReps",
                   "required": false,
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/SalesRep"
                      }
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Sales reps successfully assigned.",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/SalesRep"
                      }
                   }
                },
                "400": {
                   "description": "Too many primary sales reps",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/emails": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Contact Information"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Emails",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/EmailWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Email successfully created.",
                   "schema": {
                      "$ref": "#/definitions/EmailRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "507": {
                   "description": "Email limit reached",
                   "schema": {
                      "$ref": "#/definitions/ErrorLimitReached"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/emails/{emailId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "emailId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Contact Information"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Email",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/EmailWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Email updated.",
                   "schema": {
                      "$ref": "#/definitions/EmailRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          },
          "delete": {
             "tags": [
                "Registrant Contact Information"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Item deleted"
                },
                "404": {
                   "description": "Entity not found",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/phones": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Contact Information"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Phones",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/PhoneWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Phone number successfully created.",
                   "schema": {
                      "$ref": "#/definitions/PhoneRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "507": {
                   "description": "Phone number limit reached",
                   "schema": {
                      "$ref": "#/definitions/ErrorLimitReached"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/phones/{phoneId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "phoneId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Contact Information"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Phone",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/PhoneWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Phone number updated.",
                   "schema": {
                      "$ref": "#/definitions/PhoneRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          },
          "delete": {
             "tags": [
                "Registrant Contact Information"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Item deleted"
                }
             }
          }
       },
       "/registrants/{registrantId}/addresses": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Contact Information"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Addresses",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/AddressWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Address successfully created.",
                   "schema": {
                      "$ref": "#/definitions/AddressRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "507": {
                   "description": "Addresses limit reached",
                   "schema": {
                      "$ref": "#/definitions/ErrorLimitReached"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/addresses/{addressId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "addressId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Contact Information"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Address",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/AddressWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Address updated.",
                   "schema": {
                      "$ref": "#/definitions/AddressRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                },
                "422": {
                   "description": "Invalid request format",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          },
          "delete": {
             "tags": [
                "Registrant Contact Information"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Item deleted"
                }
             }
          }
       },
       "/registrants/{registrantId}/questions": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Question Answers"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Questions",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/Question"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Question successfully answered",
                   "schema": {
                      "$ref": "#/definitions/Question"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/questions/{questionId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "questionId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Question Answers"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Answer",
                   "required": true,
                   "schema": {
                      "properties": {
                         "answers": {
                            "type": "array",
                            "items": {
                               "$ref": "#/definitions/Answer"
                            }
                         }
                      }
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Question successfully answered",
                   "schema": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Question"
                      }
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/notes": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Notes"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Note",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/RegistrantNoteWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Note successfully created.",
                   "schema": {
                      "$ref": "#/definitions/RegistrantNoteRead"
                   }
                },
                "404": {
                   "description": "User not found",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/histories": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant History"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "History",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/HistoryWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "History successfully created.",
                   "schema": {
                      "$ref": "#/definitions/HistoryReadFull"
                   }
                },
                "404": {
                   "description": "User not found",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/histories/{historyId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "historyId",
                "type": "string",
                "required": true
             }
          ],
          "get": {
             "tags": [
                "Registrant History"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "History item with full content",
                   "schema": {
                      "$ref": "#/definitions/HistoryReadFull"
                   }
                }
             }
          },
          "put": {
             "tags": [
                "Registrant History"
             ],
             "description": "Update a history item. `createdBy` is ignored and cannot be updated.",
             "parameters": [
                {
                   "in": "body",
                   "name": "History",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/HistoryWrite"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "History item with full content",
                   "schema": {
                      "$ref": "#/definitions/HistoryReadFull"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/notes/{noteId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "noteId",
                "type": "string",
                "required": true
             }
          ],
          "delete": {
             "tags": [
                "Registrant Notes"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Note successfully deleted"
                }
             }
          }
       },
       "/registrants/{registrantId}/relationships": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             }
          ],
          "post": {
             "tags": [
                "Registrant Relationships"
             ],
             "parameters": [
                {
                   "in": "body",
                   "name": "Relationship",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/RegistrantRelationshipCreate"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "201": {
                   "description": "Relationship successfully created.",
                   "schema": {
                      "$ref": "#/definitions/RegistrantRelationshipRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          }
       },
       "/registrants/{registrantId}/relationships/{relationshipId}": {
          "parameters": [
             {
                "in": "path",
                "name": "registrantId",
                "required": true,
                "type": "string"
             },
             {
                "in": "path",
                "name": "relationshipId",
                "required": true,
                "type": "string"
             }
          ],
          "put": {
             "tags": [
                "Registrant Relationships"
             ],
             "description": "Edits a relationship type only. This method cannot be used to edit a relationship's registrant. To do so, please delete the relationship, then re-add.",
             "parameters": [
                {
                   "in": "body",
                   "name": "Relationship",
                   "required": true,
                   "schema": {
                      "$ref": "#/definitions/RegistrantRelationshipUpdate"
                   }
                }
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Relationship successfully updated.",
                   "schema": {
                      "$ref": "#/definitions/RegistrantRelationshipRead"
                   }
                },
                "400": {
                   "description": "Required fields/sub-resources are either null or empty",
                   "schema": {
                      "$ref": "#/definitions/StandardError"
                   }
                }
             }
          },
          "delete": {
             "tags": [
                "Registrant Relationships"
             ],
             "security": [
                {
                   "JwtAuthorizer": []
                }
             ],
             "responses": {
                "200": {
                   "description": "Relationship deleted"
                }
             }
          }
       }
    },
    "definitions": {
       "Inventory": {
          "title": "Inventory",
          "type": "object",
          "properties": {
             "statusOverwrite": {
                "type": "string",
                "description": "Current status of inventory. Will default to existing value if not provided.",
                "enum": [
                   "Available",
                   "Unavailable",
                   "Reserved",
                   "Subject",
                   "Firm",
                   "Firm(R)",
                   "Offer",
                   "Closed"
                ],
                "example": "Available"
             },
             "plan": {
                "type": "string",
                "example": "E2",
                "description": "This field has to be set up in Lasso. It is matched to an existing option via the name. If no existing option is found, a new one is created. Will default to existing value if not provided."
             },
             "squareFootage": {
                "type": "number",
                "example": 1251,
                "description": "Will default to existing value if not provided."
             },
             "patioSquareFootage": {
                "type": "number",
                "example": 70,
                "description": "Will default to existing value if not provided."
             },
             "colorScheme": {
                "type": "string",
                "example": "Beige",
                "description": "This field has to be set up in Lasso. It is matched to an existing option via the name. If no existing option is found, a new one is created. Will default to existing value if not provided."
             },
             "maintenanceFee": {
                "type": "number",
                "example": "351.12",
                "description": "Will default to existing value if not provided."
             },
             "floor": {
                "type": "number",
                "example": 11,
                "description": "Will default to existing value if not provided."
             },
             "bedrooms": {
                "type": "string",
                "example": "2 Bedroom + Den",
                "description": "This field has to be set up in Lasso. It is matched to an existing option via the name. If no existing option is found, a new one is created. Will default to existing value if not provided."
             },
             "bathrooms": {
                "type": "string",
                "example": "2 1/2",
                "description": "Will default to existing value if not provided."
             },
             "direction": {
                "type": "string",
                "example": "SE",
                "description": "This field has to be set up in Lasso. It is matched to an existing option via the name. If no existing option is found, a new one is created. Will default to existing value if not provided."
             },
             "exposure": {
                "type": "string",
                "example": "South East",
                "description": "This field has to be set up in Lasso. It is matched to an existing option via the name. If no existing option is found, a new one is created. Will default to existing value if not provided."
             },
             "definition": {
                "type": "string",
                "enum": [
                   "Unit",
                   "Townhome",
                   "Lot",
                   "Homesite"
                ],
                "example": "Unit",
                "description": "Will default to existing value if not provided."
             },
             "dates": {
                "$ref": "#/definitions/Dates"
             },
             "pricing": {
                "$ref": "#/definitions/Pricing"
             },
             "_links": {
                "type": "object",
                "properties": {
                   "self": {
                      "type": "string",
                      "example": "/inventory/123-123"
                   },
                   "delete": {
                      "type": "string",
                      "example": "/inventory/123-123"
                   }
                }
             }
          }
       },
       "InventoryCreate": {
          "allOf": [
             {
                "$ref": "#/definitions/Inventory"
             },
             {
                "type": "object",
                "required": [
                   "strataLot",
                   "inventoryNumber"
                ],
                "title": "InventoryCreate",
                "properties": {
                   "component": {
                      "$ref": "#/definitions/Component"
                   },
                   "strataLot": {
                      "type": "string",
                      "example": 123
                   },
                   "inventoryNumber": {
                      "type": "string",
                      "example": 123
                   },
                   "_links": {
                      "type": "object",
                      "properties": {
                         "self": {
                            "type": "string",
                            "example": "/inventory/123-123"
                         },
                         "delete": {
                            "type": "string",
                            "example": "/inventory/123-123"
                         }
                      }
                   }
                }
             }
          ]
       },
       "InventoryUpdate": {
          "allOf": [
             {
                "$ref": "#/definitions/Inventory"
             },
             {
                "type": "object",
                "title": "InventoryUpdate",
                "properties": {
                   "strataLot": {
                      "type": "string",
                      "example": 123,
                      "minLength": 1,
                      "maxLength": 15
                   },
                   "inventoryNumber": {
                      "type": "string",
                      "example": 123,
                      "minLength": 1,
                      "maxLength": 11
                   }
                }
             }
          ]
       },
       "InventoryRead": {
          "allOf": [
             {
                "$ref": "#/definitions/Inventory"
             },
             {
                "type": "object",
                "title": "InventoryRead",
                "properties": {
                   "inventoryId": {
                      "type": "string",
                      "description": "Lasso-internal inventory ID",
                      "example": 123
                   },
                   "component": {
                      "$ref": "#/definitions/Component"
                   },
                   "project": {
                      "$ref": "#/definitions/Project"
                   },
                   "strataLot": {
                      "type": "string",
                      "example": 123
                   },
                   "inventoryNumber": {
                      "type": "string",
                      "example": 123
                   }
                }
             }
          ]
       },
       "Component": {
          "title": "Component",
          "type": "object",
          "properties": {
             "name": {
                "type": "string",
                "example": "Birch Towers"
             },
             "componentId": {
                "type": "string",
                "example": 123
             }
          }
       },
       "InventorySync": {
          "allOf": [
             {
                "$ref": "#/definitions/Inventory"
             },
             {
                "type": "object",
                "title": "InventorySync",
                "properties": {
                   "revisions": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PricingRevision"
                      }
                   },
                   "notes": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Note"
                      }
                   },
                   "subjects": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Subject"
                      }
                   },
                   "deposits": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Deposit"
                      }
                   },
                   "realtors": {
                      "type": "array",
                      "description": "Realtors associated with the inventory. Only a realtor's compensation may be updated, all non compensation fields will be ignored.",
                      "items": {
                         "$ref": "#/definitions/Realtor"
                      }
                   },
                   "bicycleLockers": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/BicycleLocker"
                      }
                   },
                   "storageLockers": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/StorageLocker"
                      }
                   },
                   "parkingStalls": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/ParkingStall"
                      }
                   },
                   "salesReps": {
                      "type": "array",
                      "items": {
                         "type": "string",
                         "description": "Name of sales rep",
                         "example": "John Smith"
                      }
                   },
                   "purchasers": {
                      "type": "array",
                      "description": "List of registrant IDs to associate as purchasers with this inventory. Use the registrant create route to create a registrant if it does not exist yet.",
                      "example": [
                         123,
                         456
                      ],
                      "items": {
                         "type": "string"
                      }
                   },
                   "options": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Option"
                      }
                   }
                }
             }
          ]
       },
       "InventoryFull": {
          "allOf": [
             {
                "$ref": "#/definitions/InventoryRead"
             },
             {
                "type": "object",
                "title": "InventoryFull",
                "properties": {
                   "revisions": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PricingRevision"
                      }
                   },
                   "notes": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Note"
                      }
                   },
                   "subjects": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Subject"
                      }
                   },
                   "deposits": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Deposit"
                      }
                   },
                   "realtors": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Realtor"
                      }
                   },
                   "bicycleLockers": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/BicycleLocker"
                      }
                   },
                   "storageLockers": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/StorageLocker"
                      }
                   },
                   "parkingStalls": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/ParkingStall"
                      }
                   },
                   "salesReps": {
                      "type": "array",
                      "items": {
                         "type": "string",
                         "description": "Name of sales rep",
                         "example": "John Smith"
                      }
                   },
                   "purchasers": {
                      "type": "array",
                      "description": "List of registrant IDs to associate as purchasers with this inventory. Use the registrant create route to create a registrant if it does not exist yet.",
                      "example": [
                         123,
                         456
                      ],
                      "items": {
                         "type": "string"
                      }
                   },
                   "options": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/Option"
                      }
                   }
                }
             }
          ]
       },
       "ErrorPurchaserNotFound": {
          "title": "Purchaser not found",
          "type": "object",
          "properties": {
             "error": {
                "type": "string",
                "example": "Purchaser not found"
             },
             "errorCode": {
                "type": "number",
                "example": 406
             },
             "errorMessage": {
                "type": "string",
                "example": "Purchaser not found: 123"
             }
          }
       },
       "ErrorInventoryNotFound": {
          "title": "Inventory not found",
          "type": "object",
          "properties": {
             "error": {
                "type": "string",
                "example": "Inventory not found"
             },
             "errorCode": {
                "type": "number",
                "example": 404
             },
             "errorMessage": {
                "type": "string",
                "example": "The inventory item you tried to access does not exist. Please double-check that the inventoryId exists in Lasso."
             }
          }
       },
       "ErrorInventoryCannotBeDeleted": {
          "title": "Inventory cannot be deleted",
          "type": "object",
          "properties": {
             "error": {
                "type": "string",
                "example": "Inventory cannot be deleted"
             },
             "errorCode": {
                "type": "number",
                "example": 409
             },
             "errorMessage": {
                "type": "string",
                "example": "The inventory you tried to delete was either \"locked\" or it's status is not \"Available\""
             }
          }
       },
       "InvalidSubResourceAction": {
          "type": "object",
          "title": "Invalid sub-resource action",
          "description": "Attempted to edit an uneditable attribute or referencing a non-existent resource.",
          "properties": {
             "errorCode": {
                "type": "number",
                "example": 406
             },
             "error": {
                "type": "string",
                "description": "Broad scope error.",
                "example": "Sales rep does not exist"
             },
             "errorMessage": {
                "type": "string",
                "description": "A precise human-friendly error message",
                "example": "Sales rep 'John Smith' does not exist."
             }
          }
       },
       "AuthForbidden": {
          "type": "object",
          "title": "Forbidden",
          "description": "The given token does not have sufficient privileges to access this resource.",
          "properties": {
             "errorCode": {
                "type": "number",
                "example": 403
             },
             "error": {
                "type": "string",
                "description": "Broad scope error.",
                "example": "Forbidden."
             },
             "errorMessage": {
                "type": "string",
                "description": "A precise human-friendly error message",
                "example": "Not authorized to access inventory data from another project."
             }
          }
       },
       "ErrorInventoryAlreadySynced": {
          "title": "Inventory already synced",
          "type": "object",
          "properties": {
             "error": {
                "type": "string",
                "example": "Inventory already synced"
             },
             "errorCode": {
                "type": "number",
                "example": 409
             },
             "errorMessage": {
                "type": "string",
                "example": "The inventory item you tried to sync with Lasso was already synced. Right now, it is only possible to sync an inventory item with Lasso once. Any subsequent changes will have to be applied manually (e.g. adding a note.) Alternatively, you can reset the inventory and sync again. Resetting the inventory will remove any associated information (e.g. deposits, notes, etc). Any information that is not included in the sync will be lost. In addition, there may be issues with custom reports that inspect the system creation date of data (this is not related to dates included in the sync, like the deposit received date). If you choose to reset and sync the inventory, please ensure that you are not deleted data in Lasso."
             }
          }
       },
       "ErrorStorageSupplyExhausted": {
          "title": "Storage supply exhausted",
          "type": "object",
          "properties": {
             "errorCode": {
                "type": "number",
                "example": 400
             },
             "error": {
                "type": "string",
                "example": "Storage supply exhausted"
             },
             "storageType": {
                "type": "string",
                "example": "parking-stalls"
             },
             "errorMessage": {
                "type": "string",
                "example": "All parking stalls have been assigned to other inventories. Please remove the parking stall or increase the available parking stalls in Lasso."
             }
          }
       },
       "PricingRevision": {
          "title": "PricingRevision",
          "type": "object",
          "required": [
             "name",
             "amount"
          ],
          "properties": {
             "name": {
                "type": "string",
                "example": "Adapt to higher mortgage rates"
             },
             "amount": {
                "type": "number",
                "example": "-100000"
             }
          }
       },
       "Purchaser": {
          "title": "Purchaser",
          "type": "object",
          "required": [
             "registrantId"
          ],
          "properties": {
             "registrantId": {
                "type": "string",
                "example": 1
             },
             "firstName": {
                "type": "string",
                "example": "John"
             },
             "lastName": {
                "type": "string",
                "example": "Doe"
             },
             "purchaserType": {
                "type": "string",
                "example": "Assignee"
             },
             "purchaserReason": {
                "type": "string",
                "example": "Investment Property"
             },
             "dateAssigned": {
                "type": "string",
                "description": "Date in the ISO 8601 UTC format",
                "example": "2017-08-30T05:48:35Z"
             }
          }
       },
       "PurchaserCreate": {
          "title": "Purchaser",
          "type": "object",
          "required": [
             "registrantId"
          ],
          "properties": {
             "registrantId": {
                "type": "string",
                "example": 1
             },
             "purchaserType": {
                "type": "string",
                "example": "Assignee"
             },
             "purchaserReason": {
                "type": "string",
                "example": "Investment Property"
             }
          }
       },
       "Note": {
          "title": "Note",
          "type": "object",
          "required": [
             "note"
          ],
          "properties": {
             "noteId": {
                "type": "string",
                "example": "123"
             },
             "note": {
                "type": "string",
                "example": "Offered $10.000 credit"
             },
             "createdAt": {
                "type": "string",
                "description": "Date in the ISO 8601 UTC format",
                "example": "2017-08-30T05:48:35Z"
             }
          }
       },
       "Dates": {
          "title": "Dates",
          "type": "object",
          "description": "All dates are in the ISO 8601 UTC format, limited to year, month and day (YYYY-MM-DD). Will set all dates to blank if not provided.",
          "properties": {
             "contract": {
                "type": "string",
                "format": "date",
                "example": "2017-08-05"
             },
             "acceptance": {
                "type": "string",
                "format": "date",
                "example": "2017-08-08"
             },
             "completion": {
                "type": "string",
                "format": "date",
                "example": "2017-08-11"
             },
             "release": {
                "type": "string",
                "format": "date",
                "example": "2017-08-08"
             },
             "possession": {
                "type": "string",
                "format": "date",
                "example": "2017-08-15"
             },
             "occupancy": {
                "type": "string",
                "format": "date",
                "example": "2017-08-19"
             },
             "sendToLawyer": {
                "type": "string",
                "format": "date",
                "example": "2017-08-12"
             },
             "adjustment": {
                "type": "string",
                "format": "date",
                "example": "2017-08-30"
             },
             "_links": {
                "type": "object",
                "properties": {
                   "self": {
                      "type": "string",
                      "example": "/inventory/123-123/dates"
                   },
                   "update": {
                      "type": "string",
                      "example": "/inventory/123-123/dates"
                   }
                }
             }
          }
       },
       "Pricing": {
          "title": "Pricing",
          "type": "object",
          "description": "Sets the pricing information for the inventory in Lasso. Setting all fields to 0 except the `initialPrice` allows you to specify an exact sales price.",
          "required": [
             "initialPrice"
          ],
          "properties": {
             "initialPrice": {
                "type": "number",
                "description": "Base price of inventory",
                "example": "4300000"
             },
             "adjustedGrossPrice": {
                "type": "number",
                "example": "-50000"
             },
             "offTheTopDiscount": {
                "type": "number",
                "example": "-10000"
             },
             "inLieuOfIncentive": {
                "type": "number",
                "example": "10000"
             },
             "credit": {
                "type": "number",
                "example": "25000"
             },
             "_links": {
                "type": "object",
                "properties": {
                   "self": {
                      "type": "string",
                      "example": "/inventory/123-123/pricing"
                   },
                   "update": {
                      "type": "string",
                      "example": "/inventory/123-123/pricing"
                   }
                }
             }
          }
       },
       "Storage": {
          "description": "For all storage types, if no specific storage option is given (by setting `uniqueId`), the next unassigned storage option is associated to the inventory.",
          "required": [
             "price"
          ],
          "properties": {
             "uniqueId": {
                "type": "string",
                "example": "077"
             },
             "price": {
                "type": "number",
                "example": "12000"
             },
             "date": {
                "type": "string",
                "format": "date",
                "example": "2017-08-30"
             },
             "paymentReceivedDate": {
                "type": "string",
                "format": "date",
                "example": "2017-08-30"
             },
             "outsideOfContract": {
                "type": "boolean",
                "example": true
             },
             "description": {
                "type": "string",
                "example": "Part of storage package"
             }
          }
       },
       "ParkingStall": {
          "allOf": [
             {
                "$ref": "#/definitions/Storage"
             },
             {
                "type": "object",
                "title": "Parking Stall"
             }
          ]
       },
       "StorageLocker": {
          "allOf": [
             {
                "$ref": "#/definitions/Storage"
             },
             {
                "type": "object",
                "title": "Storage Locker"
             }
          ]
       },
       "BicycleLocker": {
          "allOf": [
             {
                "$ref": "#/definitions/Storage"
             },
             {
                "type": "object",
                "title": "Bicycle Locker"
             }
          ]
       },
       "Deposit": {
          "title": "Deposit",
          "required": [
             "amount",
             "dueDate"
          ],
          "properties": {
             "depositId": {
                "type": "string",
                "example": "123"
             },
             "amount": {
                "type": "number",
                "example": "145000"
             },
             "dueDate": {
                "type": "string",
                "format": "date",
                "example": "2017-08-30"
             },
             "amountReceived": {
                "type": "number",
                "example": "145000"
             },
             "receivedDate": {
                "type": "string",
                "format": "date",
                "example": "2017-09-10"
             }
          }
       },
       "Realtor": {
          "type": "object",
          "required": [
             "firstName",
             "lastName",
             "company"
          ],
          "properties": {
             "realtorId": {
                "type": "string",
                "example": "123"
             },
             "nameTitle": {
                "type": "string",
                "example": "Mrs"
             },
             "firstName": {
                "type": "string",
                "example": "Susan"
             },
             "lastName": {
                "type": "string",
                "example": "Smith"
             },
             "email": {
                "type": "string",
                "example": "susan.smith@example.com"
             },
             "fax": {
                "type": "string",
                "example": "(604) 123-1234"
             },
             "phone": {
                "type": "string",
                "example": "(604) 555-1234"
             },
             "company": {
                "type": "string",
                "example": "Realtor Inc"
             },
             "address": {
                "type": "string",
                "example": "123 Street"
             },
             "city": {
                "type": "string",
                "example": "Vancouver"
             },
             "province": {
                "type": "string",
                "example": "BC"
             },
             "postalCode": {
                "type": "string",
                "example": "V6V1T1"
             },
             "country": {
                "type": "string",
                "example": "Canada"
             },
             "gender": {
                "type": "string",
                "enum": [
                   "unspecified",
                   "male",
                   "female"
                ],
                "example": "female"
             },
             "compensation": {
                "$ref": "#/definitions/RealtorCompensation"
             }
          }
       },
       "RealtorCompensation": {
          "type": "object",
          "properties": {
             "bonuses": {
                "type": "array",
                "items": {
                   "type": "number",
                   "example": "10000.00"
                }
             },
             "percentages": {
                "type": "array",
                "items": {
                   "type": "object",
                   "properties": {
                      "cutOff": {
                         "type": "object",
                         "properties": {
                            "type": {
                               "type": "string",
                               "enum": [
                                  "under",
                                  "over"
                               ],
                               "example": "under"
                            },
                            "value": {
                               "type": "number",
                               "example": "100000"
                            }
                         }
                      },
                      "margin": {
                         "type": "number",
                         "description": "Percentage as fraction of 100 as float, e.g. '0.0125' => 1.25%",
                         "example": "0.022"
                      }
                   }
                }
             }
          }
       },
       "Option": {
          "type": "object",
          "required": [
             "name",
             "price"
          ],
          "properties": {
             "name": {
                "type": "string",
                "example": "Marble counter tops"
             },
             "description": {
                "type": "string",
                "example": "Upgrade for kitchen counter tops"
             },
             "price": {
                "type": "number",
                "example": "1000"
             },
             "area": {
                "type": "string",
                "example": "Kitchen",
                "description": "Areas have to be set up in Lasso, they are matched via string. If no area is found, one will be created."
             },
             "date": {
                "type": "string",
                "format": "date",
                "example": "2017-08-29"
             },
             "outsideContract": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "Subject": {
          "type": "object",
          "required": [
             "purchaser",
             "subjectDate",
             "description"
          ],
          "properties": {
             "purchaser": {
                "type": "string",
                "example": "123",
                "description": "RegistrantId of a registrant assigned to the inventory"
             },
             "subjectDate": {
                "type": "string",
                "format": "date",
                "example": "2017-08-14"
             },
             "description": {
                "type": "string",
                "example": "Adjust doors that do not close properly"
             },
             "removed": {
                "type": "boolean",
                "example": false
             },
             "removalDate": {
                "type": "string",
                "format": "date",
                "example": "2017-08-25"
             },
             "removalDescription": {
                "type": "string",
                "example": "Contractor sanded doors, all close properly now"
             }
          }
       },
       "PlanTypeRead": {
          "title": "Plan Type (Read)",
          "type": "object",
          "properties": {
             "planTypeId": {
                "type": "string",
                "example": 1
             },
             "planType": {
                "type": "string",
                "example": "E2"
             },
             "planPrice": {
                "type": "number",
                "example": "13000"
             }
          }
       },
       "PlanTypeWrite": {
          "title": "Plan Type (Write)",
          "type": "object",
          "required": [
             "planType",
             "planPrice"
          ],
          "properties": {
             "planType": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20,
                "example": "E2"
             },
             "planPrice": {
                "type": "number",
                "example": "13000"
             }
          }
       },
       "InventoryPlanTypeWrite": {
          "title": "Inventory Plan Type (Write)",
          "type": "object",
          "description": "Associate an inventory with a plan type by ID or by plan type. If both are provided, then lookup will be by ID",
          "properties": {
             "planTypeId": {
                "type": "string",
                "example": 1
             },
             "planType": {
                "type": "string",
                "example": "E2"
             }
          }
       },
       "ProjectSettings": {
          "type": "object",
          "title": "ProjectSettings",
          "properties": {
             "project": {
                "$ref": "#/definitions/Project"
             },
             "websiteTracking": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/ProjectWebsiteTracking"
                }
             },
             "rotations": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/ProjectRotation"
                }
             },
             "salesReps": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/ProjectSalesRep"
                }
             },
             "sourceTypes": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/ProjectSourceType"
                }
             },
             "secondarySourceTypes": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/ProjectSecondarySourceType"
                }
             },
             "ratings": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/ProjectRating"
                }
             },
             "followUpProcesses": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/FollowUpProcess"
                }
             },
             "questions": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/Question"
                }
             },
             "autoReplyTemplates": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/EmailTemplateMetadata"
                }
             }
          }
       },
       "ProjectWebsiteTracking": {
          "type": "object",
          "title": "Website Tracking",
          "properties": {
             "domainAccountId": {
                "type": "string",
                "example": "LAS-123456-01"
             },
             "domain": {
                "type": "string",
                "example": "http://example.com/"
             }
          }
       },
       "ProjectRotation": {
          "type": "object",
          "title": "Rotation",
          "properties": {
             "rotationId": {
                "type": "string",
                "example": 123
             },
             "rotationName": {
                "type": "string",
                "example": "Newsletter"
             }
          }
       },
       "ProjectSourceType": {
          "type": "object",
          "title": "Source Type",
          "properties": {
             "sourceTypeId": {
                "type": "string",
                "example": 123
             },
             "sourceType": {
                "type": "string",
                "example": "Online Registration"
             }
          }
       },
       "ProjectSecondarySourceType": {
          "type": "object",
          "title": "Secondary Source Type",
          "properties": {
             "secondarySourceTypeId": {
                "type": "string",
                "example": 123
             },
             "secondarySourceType": {
                "type": "string",
                "example": "Facebook"
             }
          }
       },
       "ProjectRating": {
          "type": "object",
          "title": "Rating",
          "properties": {
             "ratingId": {
                "type": "string",
                "example": 123
             },
             "rating": {
                "type": "string",
                "example": "A"
             }
          }
       },
       "ProjectSalesRep": {
          "type": "object",
          "title": "Sales Rep",
          "properties": {
             "userId": {
                "type": "string",
                "example": 123
             },
             "firstName": {
                "type": "string",
                "example": "Lasso"
             },
             "lastName": {
                "type": "string",
                "example": "Autobot"
             },
             "email": {
                "type": "string",
                "example": "john.smith@example.com"
             },
             "phone": {
                "type": "string",
                "example": "123-456-7890"
             }
          }
       },
       "RegistrantWrite": {
          "allOf": [
             {
                "$ref": "#/definitions/Registrant"
             },
             {
                "type": "object",
                "title": "RegistrantWrite",
                "properties": {
                   "emails": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/EmailWrite"
                      }
                   },
                   "phones": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PhoneWrite"
                      }
                   },
                   "addresses": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/AddressWrite"
                      }
                   },
                   "history": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/HistoryWrite"
                      }
                   },
                   "notes": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/RegistrantNoteWrite"
                      }
                   },
                   "sendSalesRepAssignmentNotification": {
                      "type": "boolean",
                      "example": true
                   },
                   "thankYouEmailTemplateId": {
                      "type": "string",
                      "example": 123
                   },
                   "sendOptInEmail": {
                      "type": "boolean",
                      "example": true
                   },
                   "rotationId": {
                      "type": "string",
                      "description": "Assign a sales rep from next in rotation. assignedSalesReps override rotationId",
                      "example": 1
                   },
                   "_links": {
                      "type": "object",
                      "properties": {
                         "self": {
                            "type": "string",
                            "description": "Link to the registrant",
                            "example": "/registrants/123"
                         },
                         "update": {
                            "type": "string",
                            "description": "Link to update the registrant",
                            "example": "/registrants/123"
                         }
                      }
                   }
                }
             }
          ]
       },
       "ContactInformation": {
          "type": "object",
          "title": "Contact Information",
          "required": [
             "firstName",
             "lastName"
          ],
          "properties": {
             "personalId": {
                "type": "string",
                "example": 1234
             },
             "nameTitle": {
                "type": "string",
                "example": "Mrs"
             },
             "firstName": {
                "type": "string",
                "example": "Jane"
             },
             "lastName": {
                "type": "string",
                "example": "Doe"
             },
             "company": {
                "type": "string",
                "example": "First Contracting"
             },
             "contactPreference": {
                "type": "string",
                "description": "How the registrant would like to be contacted",
                "enum": [
                   "noPreference",
                   "any",
                   "email",
                   "mail",
                   "phone",
                   "text",
                   "noEmail",
                   "noContact"
                ],
                "example": "any"
             },
             "gender": {
                "type": "string",
                "enum": [
                   "unspecified",
                   "male",
                   "female"
                ],
                "example": "female"
             },
             "nickname": {
                "type": "string",
                "example": "Jane"
             },
             "birthday": {
                "type": "string",
                "description": "Contains only the month and day.",
                "example": "08/14"
             },
             "emails": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/Email"
                }
             },
             "phones": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/Phone"
                }
             },
             "addresses": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/Address"
                }
             }
          }
       },
       "SubResourceNotFound": {
          "type": "object",
          "title": "Sub-Resource Not Found",
          "description": "Some sub-resources have to exist before you can specify them, like the follow-up process. That's usually because the sub-resource needs more information to create than can reasonably be included in the request, like rules for creating activities based off the follow-up process.",
          "properties": {
             "errorCode": {
                "type": "number",
                "example": 400
             },
             "error": {
                "type": "string",
                "description": "Which sub-resource was not found",
                "example": "Bad Request Sub-Resource Missing"
             },
             "errorMessage": {
                "type": "string",
                "description": "A human-friendly error message",
                "example": "If you specify a sub-resource, the sub-resource has to exist in Lasso. Please either specify a sub-resource that exists, create a new one or remove the sub-resource."
             },
             "missingSubResourceType": {
                "type": "string",
                "description": "Type of sub-resource that's missing",
                "example": "sub-resource-name"
             },
             "missingSubResource": {
                "type": "string",
                "description": "Name of the sub-resource that couldn't be found",
                "example": "Sub-Resource New Year 2015"
             }
          }
       },
       "StandardError": {
          "type": "object",
          "title": "Standard Error",
          "description": "A standard error response format.",
          "properties": {
             "errorCode": {
                "type": "number",
                "example": "4XX"
             },
             "error": {
                "type": "string",
                "description": "A summary of the error",
                "example": "Validation constraint violation"
             },
             "errorMessage": {
                "type": "string",
                "description": "Details of the error",
                "example": "Missing a required field - fieldName"
             }
          }
       },
       "ErrorLimitReached": {
          "type": "object",
          "title": "Storage limit reached",
          "description": "Certain sub-resources have a storage limit. E.g. emails, phones and addresses are limited to 5 entries per registrant.",
          "properties": {
             "errorCode": {
                "type": "number",
                "example": 507
             },
             "error": {
                "type": "string",
                "example": "Only 5 items are allowed per registrant"
             },
             "errorMessage": {
                "type": "string",
                "description": "A human-friendly error message",
                "example": "Lasso can only store up to five items per registrant. Please remove another item or update an existing one."
             },
             "limitedSubResource": {
                "type": "string",
                "description": "Type of sub-resource that was limited",
                "enum": [
                   "email",
                   "phone",
                   "address"
                ],
                "example": "item-type"
             }
          }
       },
       "EmailWrite": {
          "type": "object",
          "title": "Email Write",
          "properties": {
             "email": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50,
                "example": "test_registrant@lassocrm.com"
             },
             "type": {
                "type": "string",
                "minLength": 0,
                "maxLength": 25,
                "example": "Personal"
             },
             "primary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "Email": {
          "type": "object",
          "title": "Email",
          "properties": {
             "email": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50,
                "example": "test_registrant@lassocrm.com"
             },
             "type": {
                "type": "string",
                "minLength": 0,
                "maxLength": 25,
                "example": "Personal"
             },
             "primary": {
                "type": "boolean",
                "description": "there can be only one primary email in a non-empty collection of emails",
                "example": true
             }
          }
       },
       "PhoneWrite": {
          "type": "object",
          "title": "Phone Write",
          "properties": {
             "phone": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20,
                "example": "123-456-7890"
             },
             "type": {
                "type": "string",
                "minLength": 0,
                "maxLength": 25,
                "example": "Mobile"
             },
             "primary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "Phone": {
          "type": "object",
          "title": "Phone",
          "properties": {
             "phone": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20,
                "example": "123-456-7890"
             },
             "type": {
                "type": "string",
                "minLength": 0,
                "maxLength": 25,
                "example": "Mobile"
             },
             "primary": {
                "type": "boolean",
                "description": "there can be only one primary phone in a non-empty collection of phones",
                "example": true
             }
          }
       },
       "AddressWrite": {
          "type": "object",
          "title": "Address Write",
          "properties": {
             "address": {
                "type": "string",
                "example": "350 Fifth Avenue"
             },
             "city": {
                "type": "string",
                "example": "New York"
             },
             "country": {
                "type": "string",
                "example": "USA"
             },
             "state": {
                "type": "string",
                "example": "NY"
             },
             "zipCode": {
                "minLength": 0,
                "maxLength": 15,
                "type": "string",
                "example": "10118"
             },
             "type": {
                "type": "string",
                "example": "Mobile"
             },
             "primary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "Address": {
          "type": "object",
          "title": "Address",
          "properties": {
             "address": {
                "type": "string",
                "example": "350 Fifth Avenue"
             },
             "city": {
                "type": "string",
                "example": "New York"
             },
             "country": {
                "type": "string",
                "example": "USA"
             },
             "state": {
                "type": "string",
                "example": "NY"
             },
             "zipCode": {
                "type": "string",
                "example": "10118"
             },
             "type": {
                "type": "string",
                "example": "Mobile"
             },
             "primary": {
                "type": "boolean",
                "description": "there can be only one primary address in a non-empty collection of addresses",
                "example": true
             }
          }
       },
       "HistoryWrite": {
          "allOf": [
             {
                "$ref": "#/definitions/HistoryWithoutContent"
             },
             {
                "type": "object",
                "title": "History Write Item",
                "properties": {
                   "body": {
                      "type": "string",
                      "description": "Full content of history item. For emails, this may include serialized attachments, which may lead to a large payload."
                   }
                }
             }
          ]
       },
       "HistoryReadFull": {
          "allOf": [
             {
                "$ref": "#/definitions/HistoryRead"
             },
             {
                "type": "object",
                "title": "History Read With Full Content",
                "properties": {
                   "body": {
                      "type": "string",
                      "description": "Full content of history item. For emails, this may include serialized attachments, which may lead to a large payload."
                   }
                }
             }
          ]
       },
       "RegistrantNoteWrite": {
          "type": "object",
          "title": "Note Write",
          "description": "Contains a free-form text field",
          "properties": {
             "note": {
                "type": "string",
                "example": "Offer a $10.000 credit"
             },
             "createdBy": {
                "$ref": "#/definitions/Creator"
             },
             "_links": {
                "type": "object",
                "properties": {
                   "delete": {
                      "type": "string",
                      "example": "/registrants/123/notes/123"
                   }
                }
             }
          }
       },
       "RegistrantRelationshipCreate": {
          "type": "object",
          "title": "Relationship Create",
          "required": [
             "registrantId"
          ],
          "description": "Data for creating a relationship",
          "properties": {
             "registrantId": {
                "type": "string",
                "example": 456,
                "description": "Identifies the registrant related to this registrant."
             },
             "relationship": {
                "type": "string",
                "example": "Realtor",
                "description": "The related registrant's relationship to this registrant."
             }
          }
       },
       "RegistrantRelationshipUpdate": {
          "type": "object",
          "title": "Relationship Update",
          "description": "Data for updating a relationship",
          "properties": {
             "relationship": {
                "type": "string",
                "example": "Realtor",
                "description": "The related registrant's relationship to this registrant."
             }
          }
       },
       "Registrant": {
          "title": "Registrant",
          "type": "object",
          "properties": {
             "websiteTracking": {
                "type": "object",
                "properties": {
                   "domainAccountId": {
                      "type": "string",
                      "example": 123
                   },
                   "guid": {
                      "type": "string",
                      "example": "UID123"
                   }
                }
             },
             "excludeFromTraffic": {
                "type": "boolean",
                "description": "Exclude this registrant from traffic reports",
                "example": false
             },
             "registrationDate": {
                "type": "string",
                "format": "datetime",
                "description": "When the registrant was created in the system. Dates are in ISO 8601 UTC format.",
                "example": "2017-08-31T21:18:39Z"
             },
             "externalId": {
                "type": "string",
                "example": "ABC123",
                "description": "identifies this registrant in an externally linked system. The external system is determined from the api key"
             },
             "externalDuplicateIds": {
                "type": "array",
                "description": "a registrant that has been merged with another will inherit the other's externalId. This list keeps track of all other externalId's linked to this single registrant",
                "items": {
                   "type": "string",
                   "example": "DEF456"
                }
             },
             "person": {
                "$ref": "#/definitions/RegistrantPersonalInfo"
             },
             "rating": {
                "$ref": "#/definitions/Rating"
             },
             "sourceType": {
                "$ref": "#/definitions/SourceType"
             },
             "secondarySourceType": {
                "$ref": "#/definitions/SecondarySourceType"
             },
             "followUpProcess": {
                "$ref": "#/definitions/FollowUpProcess"
             },
             "assignedSalesReps": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/SalesRep"
                }
             },
             "questions": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/Question"
                }
             }
          }
       },
       "RegistrantRead": {
          "allOf": [
             {
                "$ref": "#/definitions/Registrant"
             },
             {
                "type": "object",
                "title": "RegistrantRead",
                "properties": {
                   "registrantId": {
                      "type": "string",
                      "example": 123
                   },
                   "project": {
                      "$ref": "#/definitions/Project"
                   },
                   "emails": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/EmailRead"
                      }
                   },
                   "phones": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/PhoneRead"
                      }
                   },
                   "addresses": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/AddressRead"
                      }
                   },
                   "history": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/HistoryRead"
                      }
                   },
                   "notes": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/RegistrantNoteRead"
                      }
                   },
                   "relationships": {
                      "type": "array",
                      "items": {
                         "$ref": "#/definitions/RegistrantRelationshipRead"
                      }
                   },
                   "_links": {
                      "type": "object",
                      "properties": {
                         "self": {
                            "type": "string",
                            "description": "Link to the registrant",
                            "example": "/registrants/123"
                         },
                         "update": {
                            "type": "string",
                            "description": "Link to update the registrant",
                            "example": "/registrants/123"
                         }
                      }
                   }
                }
             }
          ]
       },
       "RegistrantPersonalInfo": {
          "type": "object",
          "title": "Registrant Personal Info",
          "required": [
             "firstName",
             "lastName"
          ],
          "properties": {
             "personalId": {
                "type": "string",
                "example": 1234
             },
             "nameTitle": {
                "type": "string",
                "example": "Mrs"
             },
             "firstName": {
                "type": "string",
                "example": "Jane"
             },
             "lastName": {
                "type": "string",
                "example": "Doe"
             },
             "company": {
                "type": "string",
                "example": "First Contracting"
             },
             "contactPreference": {
                "type": "string",
                "description": "How the registrant would like to be contacted",
                "enum": [
                   "noPreference",
                   "any",
                   "email",
                   "mail",
                   "phone",
                   "text",
                   "noEmail",
                   "noContact"
                ],
                "example": "any"
             },
             "gender": {
                "type": "string",
                "enum": [
                   "unspecified",
                   "male",
                   "female"
                ],
                "example": "female"
             },
             "nickname": {
                "type": "string",
                "example": "Jane"
             },
             "birthday": {
                "type": "string",
                "description": "Contains only the month and day.",
                "example": "08/14"
             },
             "ssnSin": {
                "type": "string",
                "description": "The social insurance number or social security number. Please ensure that you are allowed to collect this information in your jurisdiction.",
                "example": "046 454 286"
             }
          }
       },
       "Project": {
          "title": "Project",
          "type": "object",
          "properties": {
             "name": {
                "type": "string",
                "example": "Birch Towers"
             },
             "projectId": {
                "type": "string",
                "example": 123
             }
          }
       },
       "Rating": {
          "type": "object",
          "title": "Rating",
          "description": "If rating does not exist, it will be created",
          "properties": {
             "rating": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50,
                "example": "A"
             }
          }
       },
       "SourceType": {
          "type": "object",
          "title": "Source Type",
          "description": "If the source type doesn't exist, it will be created",
          "properties": {
             "sourceType": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "example": "Online Registration"
             }
          }
       },
       "SecondarySourceType": {
          "type": "object",
          "title": "Secondary Source Type",
          "description": "If the secondary source type does not exist, it will be created",
          "properties": {
             "secondarySourceType": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "example": "Facebook"
             }
          }
       },
       "FollowUpProcess": {
          "type": "object",
          "title": "Follow-up Process",
          "description": "If `followUpProcessId` is provided, the system will attempt to lookup the process by id, and fail if not found. If `followUpProcessId` is not provided, but `followUpProcess` is instead provided, the system will then attempt to lookup the process by value. If the value doesn't exist, it will be created",
          "properties": {
             "followUpProcessId": {
                "type": "string",
                "example": 1
             },
             "followUpProcess": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20,
                "example": "30 day follow up"
             }
          }
       },
       "ExternalId": {
          "type": "object",
          "title": "External ID",
          "required": [
             "externalId"
          ],
          "description": "Integration externalId associated with a registrant in Lasso",
          "properties": {
             "externalId": {
                "type": "string",
                "example": "123ABC"
             }
          }
       },
       "EmailRead": {
          "type": "object",
          "title": "Email Read",
          "properties": {
             "emailId": {
                "type": "string",
                "example": 123
             },
             "email": {
                "type": "string",
                "example": "test_registrant@lassocrm.com"
             },
             "type": {
                "type": "string",
                "example": "Personal"
             },
             "primary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "PhoneRead": {
          "type": "object",
          "title": "Phone Read",
          "properties": {
             "phoneId": {
                "type": "string",
                "example": 123
             },
             "phone": {
                "type": "string",
                "example": "123-456-7890"
             },
             "type": {
                "type": "string",
                "example": "Mobile"
             },
             "primary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "AddressRead": {
          "type": "object",
          "title": "Address Read",
          "properties": {
             "addressId": {
                "type": "string",
                "example": 123
             },
             "address": {
                "type": "string",
                "example": "350 Fifth Avenue"
             },
             "city": {
                "type": "string",
                "example": "New York"
             },
             "country": {
                "type": "string",
                "example": "USA"
             },
             "state": {
                "type": "string",
                "example": "NY"
             },
             "zipCode": {
                "type": "string",
                "example": "10118"
             },
             "type": {
                "type": "string",
                "example": "Mobile"
             },
             "primary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "SalesRep": {
          "type": "object",
          "title": "Sales Rep",
          "description": "When inputting a salesRep, you can provide a userId and the system\nwill try to look up the salesRep by the ID.\n\nIf no userId is provided but a first and last name are, then\nthe system will lookup the salesRep by name and assign it to this registrant.\n\nOtherwise, no salesRep will be assigned.\n\nNotes:\n- if multiple salesReps are being assigned, take care to only  choose one to be primary. If multiple are designated as primary, an error will\n  be returned\n- on registrant create, if both rotationId and assignedSalesReps are specified,  assignedSalesReps will override rotationId in salesRep selection.\n",
          "properties": {
             "userId": {
                "type": "string",
                "example": 123
             },
             "firstName": {
                "type": "string",
                "example": "Lasso"
             },
             "lastName": {
                "type": "string",
                "example": "Autobot"
             },
             "isPrimary": {
                "type": "boolean",
                "example": true
             }
          }
       },
       "Question": {
          "type": "object",
          "title": "Question",
          "description": "Questions in Lasso are sorted into folders. You can use `path` to\nspecify which folder the question should be saved to.\n\nSpecifying the questionId will override name and path and the\nquestion will be looked up by its ID. If no question is found the\nquestion is *not* created and the request fails.\n\nAny existing registrant answers to the question will be replaced by the\nanswers from this request. Existing answer options on the question will\nnot be removed.\n\nIf the question does not exist and no question ID is provided, a new\nquestion will be created. If the path is empty, the question will be\ncreated in a folder named after the API key vendor type - ie, `lassoLeadCapture`.\n\nThe possible answer options are created for each answer provided in the\n`answer` key. Only question type `checkbox` supports multiple answers. All\nof them will be marked as checked for the registrant.\n",
          "properties": {
             "questionId": {
                "type": "string",
                "description": "Specifies precisely which question",
                "example": 123
             },
             "type": {
                "type": "string",
                "description": "If the question does not exist, this defines which type of question is\ngoing to be created. Available types are:\n- Checkbox\n  Multiple possible answers, and multiple set answers\n- Text\n  Only one possible answer which is freeform text\n- Date\n  Only one possible answer, a date in the ISO 8601 UTC format\n",
                "enum": [
                   "checkbox",
                   "text",
                   "date"
                ],
                "example": "checkbox"
             },
             "name": {
                "type": "string",
                "example": "How did you hear about us?"
             },
             "path": {
                "type": "string",
                "description": "Specify which folder the question is in. Format: `/folder/subfolder`. If no path is given, the `integrations` folder will be used.",
                "example": "/marketing/inbound"
             },
             "answers": {
                "type": "array",
                "items": {
                   "$ref": "#/definitions/Answer"
                }
             }
          }
       },
       "Answer": {
          "type": "object",
          "title": "Question Answer",
          "description": "Represents an answer for a question for the registrant",
          "properties": {
             "answerId": {
                "type": "string",
                "description": "Specifies the answer by id. If present, `answer` will be ignored. If no answer matches `answerId` the request fails.",
                "example": 123
             },
             "answer": {
                "type": "string",
                "description": "If no `answerId` is given, the answer will be looked-up by it's answer string. If no answer with the given answer string exists, the answer will be created.",
                "example": "Recommended by a friend"
             }
          }
       },
       "HistoryWithoutContent": {
          "type": "object",
          "description": "History tracks communication with the registrant. Various types of history items are supported, e.g. emails, phone call or appointments. The content for history items is limited to the first 200 characters, as emails may grow very large and include embedded content (e.g. images) that makes transferring all history content at once unfeasible. If you need the full content for any given history item, you can request it from the `self` link.",
          "properties": {
             "type": {
                "type": "string",
                "description": "Clients can create their own history types, so an exhaustive list of available history items is currently not available. Defaults:\nAppointment Cancelled Appointment Email Email Reply Fax Mail Mass Mail Merge Opted-Out Phone - Left Message Return Visit SSRU Visit\n",
                "example": "Email"
             },
             "typeId": {
                "type": "string",
                "description": "ID of the history type (could be client-created)",
                "example": 123
             },
             "subject": {
                "type": "string",
                "description": "Short summary of history item",
                "example": "Welcome to Birch Towers"
             },
             "date": {
                "type": "string",
                "format": "datetime",
                "description": "When the history item was received, e.g. send-date for email",
                "example": "2017-08-31T21:18:39Z"
             },
             "createdBy": {
                "$ref": "#/definitions/Creator"
             },
             "_links": {
                "type": "object",
                "properties": {
                   "self": {
                      "type": "string",
                      "example": "/registrants/123/history/123"
                   }
                }
             }
          }
       },
       "HistoryRead": {
          "allOf": [
             {
                "$ref": "#/definitions/HistoryWithoutContent"
             },
             {
                "type": "object",
                "title": "History Read Item",
                "properties": {
                   "historyId": {
                      "type": "string",
                      "example": 123
                   }
                }
             }
          ]
       },
       "RegistrantNoteRead": {
          "type": "object",
          "title": "Note Read",
          "description": "Contains a free-form text field",
          "properties": {
             "noteId": {
                "type": "string",
                "example": 123
             },
             "note": {
                "type": "string",
                "example": "Offer a $10.000 credit"
             },
             "createdBy": {
                "$ref": "#/definitions/Creator"
             },
             "_links": {
                "type": "object",
                "properties": {
                   "delete": {
                      "type": "string",
                      "example": "/registrants/123/notes/123"
                   }
                }
             }
          }
       },
       "RegistrantRelationshipRead": {
          "type": "object",
          "title": "Relationship Read",
          "description": "Contains a registrant's relationships",
          "properties": {
             "relationshipId": {
                "type": "string",
                "example": 123
             },
             "registrantId": {
                "type": "string",
                "example": 456
             },
             "relationship": {
                "type": "string",
                "example": "Wife"
             },
             "reverse": {
                "type": "string",
                "example": "Husband"
             },
             "firstName": {
                "type": "string",
                "example": "John"
             },
             "lastName": {
                "type": "string",
                "example": "Doe"
             }
          }
       },
       "Creator": {
          "type": "object",
          "title": "Creator",
          "description": "Determines the user that created this entity based on an ordered set of Heuristics:\n- if creator is null or empty, then default to user: Lasso Autobot\n- if userId is provided, then lookup user by id, respond with 400 level error if specified user does not exist\n- if user first and last name are provided, then lookup user by name, otherwise default to user: Lasso Autobot\n",
          "properties": {
             "firstName": {
                "type": "string",
                "example": "John"
             },
             "lastName": {
                "type": "string",
                "example": "Smith"
             },
             "userId": {
                "type": "string",
                "example": 123
             }
          }
       },
       "EmailTemplateMetadata": {
          "type": "object",
          "title": "Email Template Metadata",
          "description": "Size conservative metadata representation of Email Template i.e. no content body\n",
          "properties": {
             "templateId": {
                "type": "string",
                "example": 123
             },
             "folderId": {
                "type": "string",
                "example": 123
             },
             "name": {
                "type": "string",
                "example": "Welcoming email"
             },
             "subject": {
                "type": "string",
                "example": "You are offically welcomed"
             }
          }
       }
    },
    "parameters": {
       "Cursor": {
          "name": "cursor",
          "in": "query",
          "type": "string",
          "description": "A cursor for the next batch of registrants is providing in the metadata of the body. Provide the `next` cursor as a query parameter in your next request to access the next batch of registrants.\nIt's a base64 encoded json object with the fields `v` for version, `o` for offset and `l` for limit. You don't have to create the cursor object as it is embedded in the `next` link provided in the result set.\nVersion is an integer that indicates the layout of the cursor. Future layouts may provide a different way to access parts of a result set, e.g. by providing a primary key as a reference point. This prevents the missing/repeated data issue with paged results, if the result set is modified during paging (e.g. a registrant is added while on page 2, and when loading page 3, the last registrant from page is pushed down to be the first registrant on page three and being included in two result pages. The opposite happens if a registrant is deleted, one result will be skipped.)"
       }
    },
    "securityDefinitions": {
       "JwtAuthorizer": {
          "type": "apiKey",
          "in": "header",
          "name": "Authorization"
       }
    },
    "security": [
       {
          "JwtAuthorizer": []
       }
    ]
 }
